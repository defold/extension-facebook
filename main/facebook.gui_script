local dirtylarry = require "dirtylarry/dirtylarry"

local function update_access_token(self)
	if facebook and facebook.access_token() then
		gui.set_text(gui.get_node("access_token"), "Access token found")
	else
		gui.set_text(gui.get_node("access_token"), "")
	end
end

local function update_version(self)
	local n = gui.get_node("version")
	gui.set_text(n, "v." .. (facebook and facebook.get_version() or ""))
end

function init(self)
	gui.set_render_order(15)
	self.root = gui.get_node("root")
	msg.post("#", "acquire_input_focus")
end

function on_message(self, message_id, message, sender)
	-- screen movement
	move_root(self, message_id, message)
end

local function fb_login(self, data)
	pprint("------------------- fb_login(self, data) -----------------------")
	if data.status == facebook.STATE_OPEN then
		gui.set_text(gui.get_node("status"), "fb_login - facebook.STATE_OPEN")
	end

	if data.status == facebook.STATE_CLOSED_LOGIN_FAILED then
		gui.set_text(gui.get_node("status"), "fb_login - facebook.STATE_CLOSED_LOGIN_FAILED")
	end

	if data.error then
		gui.set_text(gui.get_node("error"), "fb_login - " .. tostring(data.error))
	else
		gui.set_text(gui.get_node("error"), "fb_login - no error")
	end
	update_access_token(self)
end

local function fb_login_limited(self, data)
	pprint("------------------- fb_login(self, data) -----------------------")
	if data.status == facebook.STATE_OPEN then
		local authentication_token = facebook.get_current_authentication_token()
		local current_profile = facebook.get_current_profile()
		pprint("authentication_token:", authentication_token)
		pprint("current_profile:", current_profile)
		gui.set_text(gui.get_node("status"), "fb_login - facebook.STATE_OPEN \nName:"..current_profile.name)
	end

	if data.status == facebook.STATE_CLOSED_LOGIN_FAILED then
		gui.set_text(gui.get_node("status"), "fb_login - facebook.STATE_CLOSED_LOGIN_FAILED")
	end

	if data.error then
		gui.set_text(gui.get_node("error"), "fb_login - " .. tostring(data.error))
	else
		gui.set_text(gui.get_node("error"), "fb_login - no error")
	end
end

local function get_name_callback(self, id, response)
	gui.set_text(gui.get_node("status"), response.status)
	local r = json.decode(response.response)
	if r.error then
		gui.set_text(gui.get_node("error"), "get_name_callback - " .. tostring(r.error.message))
	else
		gui.set_text(gui.get_node("error"), "get_name_callback - no error")
	end

	if r.name then
		gui.set_text(gui.get_node("name"), "get_name_callback - Hello " .. r.name)
	end
end

local function fb_share(self, result, error)
	pprint("fb_share - result table: ")
	pprint(result)
	if error then
		pprint("#################### fb_share, error: ")
		pprint(error)
		gui.set_text(gui.get_node("status"), "fb_share - ERROR")
		gui.set_text(gui.get_node("error"), "fb_share - " .. tostring(error.error))
	else
		if result.post_id then
			gui.set_text(gui.get_node("status"), "fb_share - post id: " .. result.post_id)
		else
			gui.set_text(gui.get_node("status"), "fb_share - no post id in results")
		end
		gui.set_text(gui.get_node("error"), "fb_share - no error")
	end
end

local function deferred_deep_link(self, result, error)
	print("deferred_deep_link result: ")
	pprint(result)
	print("deferred_deep_link error: ")
	pprint(error)
	if error then
		pprint("#################### fb_deferredlinkapp, error: ")
		pprint(error)
		gui.set_text(gui.get_node("status"), "deferred_deep_link - ERROR")
		gui.set_text(gui.get_node("error"), "deferred_deep_link - " .. tostring(error.error))
	else
		local str = ""
		for k, v in pairs(result) do
			str = str..k..":"..tostring(v)..", "
		end
		gui.set_text(gui.get_node("status"), "deferred_deep_link: " .. str)
		gui.set_text(gui.get_node("error"), "deferred_deep_link - no error")
	end
end

function on_input(self, action_id, action)
	if not action_id or not facebook then
		return
	end
	-- TODO add buttons for game requests

	-- https://developers.facebook.com/docs/facebook-login/permissions/#reference-default

	self.public_profile = dirtylarry:checkbox("checkbox_public_profile", action_id, action, self.public_profile)
	self.email = dirtylarry:checkbox("checkbox_email", action_id, action, self.email)
	self.publish_pages = dirtylarry:checkbox("checkbox_publish_pages", action_id, action, self.publish_pages)

	local permissions = {}
	if self.public_profile then
		table.insert(permissions, "public_profile")
	end
	if self.email then
		table.insert(permissions, "email")
	end
	if self.publish_pages then
		table.insert(permissions, "publish_pages")
	end

	dirtylarry:button("init", action_id, action, function ()
		print("init")
		facebook.init()
		update_version(self)
		update_access_token(self)
	end)

	dirtylarry:button("gamereq_nonappusers", action_id, action, function ()
		print("gamereq_nonappusers")
		facebook.show_dialog("apprequests",
		{
			title = "New Life!",
			data = "100017672412032", -- Billy Fiction
			message = "You got a life, congrats!",
			filters = facebook.GAMEREQUEST_FILTER_APPNONUSERS,
		},
		fb_share)
	end)
	
	dirtylarry:button("gamereq_appusers", action_id, action, function ()
		print("gamereq_appusers")
		facebook.show_dialog("apprequests",
		{
			title = "New Life!",
			data = "100014077812082", -- Defold Andersson
			message = "You got a life, congrats!",
			filters = facebook.GAMEREQUEST_FILTER_APPUSERS,
		},
		fb_share)
	end)

	dirtylarry:button("gamereq_to", action_id, action, function ()
		print("gamereq_to")
		facebook.show_dialog("apprequests",
		{
			title = "New life!",
			data = "100014077812082", -- Defold Andersson
			message = "You got a life! Good job!",
			to = "100017672412032,100014077812082"
		},
		fb_share)
	end)
	dirtylarry:button("gamereq_recipients", action_id, action, function ()
		print("gamereq_recipients")
		facebook.show_dialog("apprequests",
		{
			title = "New life!",
			data = "100014077812082", -- Defold Andersson
			message = "You got a life! Yay!",
			recipients = {"100017672412032","100014077812082"}
		},
		fb_share)
	end)

	dirtylarry:button("login", action_id, action, function ()
		print("login")
		facebook.login_with_permissions(permissions, facebook.AUDIENCE_EVERYONE, fb_login)
	end)

	dirtylarry:button("limited_login", action_id, action, function ()
		print("limited_login")
		facebook.set_default_audience(facebook.AUDIENCE_EVERYONE)
		facebook.login_with_tracking_preference(facebook.LOGIN_TRACKING_LIMITED, permissions, "cryptononce", fb_login_limited)
	end)

	dirtylarry:button("share", action_id, action, function ()
		print("share")
		local param = { link = "https://www.defold.com",picture="https://defold.com/images/logo/defold/logo/logo-ver-classic-white-160.png" }
		facebook.show_dialog("feed", param, fb_share)
	end)

	dirtylarry:button("logout", action_id, action, function ()
		print("logout")
		facebook.logout()
		gui.set_text(gui.get_node("status"), "no status")
		gui.set_text(gui.get_node("error"), "no error")
		gui.set_text(gui.get_node("name"), "")
		update_access_token(self)
	end)

	dirtylarry:button("read_name", action_id, action, function ()
		print("read_name")
		local token = facebook.access_token()
		if token then
			local url = "https://graph.facebook.com/me/?access_token=".. token
			http.request(url, "GET", get_name_callback)
		end
	end)

	dirtylarry:button("permissions", action_id, action, function ()
		print("permissions")
		local permissions = facebook.permissions()
		local str = "Permissions:\n"
		for k,v in pairs(permissions) do
			str = str .. tostring(v) .. "\n"
		end
		gui.set_text(gui.get_node("status"), str)
	end)

	dirtylarry:button("deferredlinkapp", action_id, action, function ()
		print("deferredlinkapp")
		facebook.deferred_deep_link(deferred_deep_link)
	end)

	dirtylarry:button("postevent", action_id, action, function ()
		print("post event")
		local params = { [facebook.PARAM_LEVEL] = 23 }
		facebook.post_event(facebook.EVENT_ACHIEVED_LEVEL, 23, params)
	end)
end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
